{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jagadeesh\\\\Desktop\\\\myrapp\\\\src\\\\useRef\\\\UseRef.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport React from 'react';\n// useRef() \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UseRef = () => {\n  _s();\n  let [state, setState] = useState(\"\");\n  let count = useRef(0); // useRef () will return the object {} \n  console.log(\"re-render\");\n  useEffect(() => {\n    count.current = count.current + 1;\n  });\n  let init = useRef();\n  let changleStyle = () => {\n    init.current.style.backgroundColor = \"red\";\n    init.current.focus();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"hint\",\n      children: \"useRef\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      onDoubleClick: () => init.current.style.backgroundColor = \"green\",\n      ref: init,\n      children: \"hello world ....Change color\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Component rendered \", count.current, \" times\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"enter sometheing\",\n      onChange: e => setState(e.target.value),\n      value: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: init\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changleStyle,\n      children: \"Change\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(UseRef, \"aJFHcCimtcgS9mJ8GboF+XFjVkM=\");\n_c = UseRef;\nexport default UseRef;\nvar _c;\n$RefreshReg$(_c, \"UseRef\");","map":{"version":3,"names":["useEffect","useRef","useState","React","jsxDEV","_jsxDEV","UseRef","_s","state","setState","count","console","log","current","init","changleStyle","style","backgroundColor","focus","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onDoubleClick","ref","type","placeholder","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Jagadeesh/Desktop/myrapp/src/useRef/UseRef.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\"\r\nimport React from 'react'\r\n// useRef() \r\n\r\nconst UseRef = () => {\r\n  let [state, setState] = useState(\"\")\r\n  let count = useRef(0) // useRef () will return the object {} \r\n  console.log(\"re-render\")\r\n  useEffect(() => {\r\n    count.current = count.current + 1\r\n  })\r\n  let init = useRef()\r\n  let changleStyle = () => {\r\n    init.current.style.backgroundColor = \"red\"\r\n    init.current.focus()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"hint\">useRef</h1>\r\n      <p onDoubleClick={() => init.current.style.backgroundColor = \"green\"} ref={init}>hello world ....Change color</p>\r\n      <h1>Component rendered {count.current} times</h1>\r\n      <input type=\"text\" placeholder=\"enter sometheing\"\r\n        onChange={(e) => setState(e.target.value)}\r\n        value={state} />\r\n      <br /><br />\r\n      <input type=\"text\" ref={init} />\r\n      <button onClick={changleStyle}>Change</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UseRef\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,IAAIQ,KAAK,GAAGT,MAAM,CAAC,CAAC,CAAC,EAAC;EACtBU,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EACxBZ,SAAS,CAAC,MAAM;IACdU,KAAK,CAACG,OAAO,GAAGH,KAAK,CAACG,OAAO,GAAG,CAAC;EACnC,CAAC,CAAC;EACF,IAAIC,IAAI,GAAGb,MAAM,EAAE;EACnB,IAAIc,YAAY,GAAGA,CAAA,KAAM;IACvBD,IAAI,CAACD,OAAO,CAACG,KAAK,CAACC,eAAe,GAAG,KAAK;IAC1CH,IAAI,CAACD,OAAO,CAACK,KAAK,EAAE;EACtB,CAAC;EAED,oBACEb,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAIe,SAAS,EAAC,MAAM;MAAAD,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAChCnB,OAAA;MAAGoB,aAAa,EAAEA,CAAA,KAAMX,IAAI,CAACD,OAAO,CAACG,KAAK,CAACC,eAAe,GAAG,OAAQ;MAACS,GAAG,EAAEZ,IAAK;MAAAK,QAAA,EAAC;IAA4B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACjHnB,OAAA;MAAAc,QAAA,GAAI,qBAAmB,EAACT,KAAK,CAACG,OAAO,EAAC,QAAM;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACjDnB,OAAA;MAAOsB,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC,kBAAkB;MAC/CC,QAAQ,EAAGC,CAAC,IAAKrB,QAAQ,CAACqB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAC1CA,KAAK,EAAExB;IAAM;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAClBnB,OAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eAAAnB,OAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACZnB,OAAA;MAAOsB,IAAI,EAAC,MAAM;MAACD,GAAG,EAAEZ;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAChCnB,OAAA;MAAQ4B,OAAO,EAAElB,YAAa;MAAAI,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC1C;AAEV,CAAC;AAAAjB,EAAA,CA1BKD,MAAM;AAAA4B,EAAA,GAAN5B,MAAM;AA4BZ,eAAeA,MAAM;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}