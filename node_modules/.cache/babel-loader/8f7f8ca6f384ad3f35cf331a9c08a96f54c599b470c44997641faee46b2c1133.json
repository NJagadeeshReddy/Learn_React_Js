{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jagadeesh\\\\Desktop\\\\myrapp\\\\src\\\\useRef\\\\UseRef.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport React from 'react';\n// useRef() \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UseRef = () => {\n  _s();\n  let [state, setState] = useState(\"\");\n  let count = useRef(0); // useRef () will return the object {} \n  console.log(\"re-render\");\n  useEffect(() => {\n    count.current = count.current + 1;\n  });\n  let init = useRef();\n  let changleStyle = () => {\n    init.current.style.backgroundColor = \"red\";\n    init.current.focus();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      onDoubleClick: () => init.current.style.backgroundColor = \"green\",\n      ref: init,\n      children: \"hello world ....Change\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Component rendered \", count.current, \" times\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"enter sometheing\",\n      onChange: e => setState(e.target.value),\n      value: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: init\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changleStyle,\n      children: \"Change\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(UseRef, \"RMLXo/vD2LfSS971NBt8UZ/ujgE=\");\n_c = UseRef;\nexport default UseRef;\nvar _c;\n$RefreshReg$(_c, \"UseRef\");","map":{"version":3,"names":["useEffect","useRef","useState","React","jsxDEV","_jsxDEV","UseRef","_s","state","setState","count","console","log","current","init","changleStyle","style","backgroundColor","focus","children","onDoubleClick","ref","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Jagadeesh/Desktop/myrapp/src/useRef/UseRef.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\"\r\nimport React from 'react'\r\n// useRef() \r\n\r\nconst UseRef = () => {\r\n    let [state ,setState]=useState(\"\")\r\n    let count =useRef(0) // useRef () will return the object {} \r\n    console.log(\"re-render\")\r\n    useEffect (()=>{\r\n        count.current =count.current+1\r\n    })\r\n    let init=useRef()\r\n    let changleStyle =()=>{\r\n        init.current.style.backgroundColor=\"red\"\r\n        init.current.focus()\r\n    }\r\n    \r\n  return (\r\n    <div>\r\n        <p onDoubleClick={()=>init.current.style.backgroundColor=\"green\"} ref={init}>hello world ....Change</p>\r\n        <h1>Component rendered {count.current} times</h1>\r\n      <input type=\"text\" placeholder=\"enter sometheing\" \r\n      onChange={(e)=>setState(e.target.value)}\r\n       value={state}/>\r\n       <br /><br />\r\n       <input type=\"text\" ref={init} />\r\n       <button onClick={changleStyle}>Change</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UseRef\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAACP,QAAQ,CAAC,EAAE,CAAC;EAClC,IAAIQ,KAAK,GAAET,MAAM,CAAC,CAAC,CAAC,EAAC;EACrBU,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EACxBZ,SAAS,CAAE,MAAI;IACXU,KAAK,CAACG,OAAO,GAAEH,KAAK,CAACG,OAAO,GAAC,CAAC;EAClC,CAAC,CAAC;EACF,IAAIC,IAAI,GAACb,MAAM,EAAE;EACjB,IAAIc,YAAY,GAAEA,CAAA,KAAI;IAClBD,IAAI,CAACD,OAAO,CAACG,KAAK,CAACC,eAAe,GAAC,KAAK;IACxCH,IAAI,CAACD,OAAO,CAACK,KAAK,EAAE;EACxB,CAAC;EAEH,oBACEb,OAAA;IAAAc,QAAA,gBACId,OAAA;MAAGe,aAAa,EAAEA,CAAA,KAAIN,IAAI,CAACD,OAAO,CAACG,KAAK,CAACC,eAAe,GAAC,OAAQ;MAACI,GAAG,EAAEP,IAAK;MAAAK,QAAA,EAAC;IAAsB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACvGpB,OAAA;MAAAc,QAAA,GAAI,qBAAmB,EAACT,KAAK,CAACG,OAAO,EAAC,QAAM;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACnDpB,OAAA;MAAOqB,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC,kBAAkB;MACjDC,QAAQ,EAAGC,CAAC,IAAGpB,QAAQ,CAACoB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MACvCA,KAAK,EAAEvB;IAAM;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eACfpB,OAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eAAApB,OAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACZpB,OAAA;MAAOqB,IAAI,EAAC,MAAM;MAACL,GAAG,EAAEP;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAChCpB,OAAA;MAAQ2B,OAAO,EAAEjB,YAAa;MAAAI,QAAA,EAAC;IAAM;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC3C;AAEV,CAAC;AAAAlB,EAAA,CAzBKD,MAAM;AAAA2B,EAAA,GAAN3B,MAAM;AA2BZ,eAAeA,MAAM;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}