{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jagadeesh\\\\Desktop\\\\myrapp\\\\src\\\\useCallBack\\\\UseCallBack.jsx\",\n  _s = $RefreshSig$();\n// The useCallback hook is used to memoize a function, \n// similar to useMemo, but specifically designed for functions. \n// It helps prevent unnecessary re-creation of functions, \n// which can be beneficial when passing callbacks as props to child components, \n// as it ensures child components don't unnecessarily re-render.\nimport React, { useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UseCallBack = () => {\n  _s();\n  const [count, setCount] = useState(0);\n\n  // Define a function that will be memoized using useCallback\n  const handleIncrement = useCallback(() => {\n    setCount(prevCount => prevCount + 1);\n  }, []); // Empty dependency array means the function is created once and never re-created.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"useCallback Hook Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleIncrement,\n      children: \"Increment Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(UseCallBack, \"XtZ8NnWMNEDUOgTWy1MD+Yg3AqU=\");\n_c = UseCallBack;\nexport default UseCallBack;\nvar _c;\n$RefreshReg$(_c, \"UseCallBack\");","map":{"version":3,"names":["React","useState","useCallback","jsxDEV","_jsxDEV","UseCallBack","_s","count","setCount","handleIncrement","prevCount","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Jagadeesh/Desktop/myrapp/src/useCallBack/UseCallBack.jsx"],"sourcesContent":["// The useCallback hook is used to memoize a function, \r\n// similar to useMemo, but specifically designed for functions. \r\n// It helps prevent unnecessary re-creation of functions, \r\n// which can be beneficial when passing callbacks as props to child components, \r\n// as it ensures child components don't unnecessarily re-render.\r\nimport React, { useState, useCallback } from 'react';\r\n\r\nconst UseCallBack = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  // Define a function that will be memoized using useCallback\r\n  const handleIncrement = useCallback(() => {\r\n    setCount(prevCount => prevCount + 1);\r\n  }, []); // Empty dependency array means the function is created once and never re-created.\r\n\r\n  return (\r\n    <div>\r\n      <h1>useCallback Hook Example</h1>\r\n      <p>Count: {count}</p>\r\n      {/* We pass the memoized function as a callback to the button onClick */}\r\n      <button onClick={handleIncrement}>Increment Count</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UseCallBack;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMQ,eAAe,GAAGP,WAAW,CAAC,MAAM;IACxCM,QAAQ,CAACE,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEN,OAAA;IAAAO,QAAA,gBACEP,OAAA;MAAAO,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACjCX,OAAA;MAAAO,QAAA,GAAG,SAAO,EAACJ,KAAK;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAErBX,OAAA;MAAQY,OAAO,EAAEP,eAAgB;MAAAE,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACtD;AAEV,CAAC;AAACT,EAAA,CAhBID,WAAW;AAAAY,EAAA,GAAXZ,WAAW;AAkBjB,eAAeA,WAAW;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}